// src/pages/MainLayout.jsx
import { StatusBar } from 'expo-status-bar'
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'
import React, { useEffect, useState } from 'react'
import { Button, StyleSheet, View, Text } from 'react-native'
import AutoSaveManager from '../components/AutoSaveManager'
import TabNavigator from '../Navigation/TabNavigator'
import themes from '../config/themes'
import { useSchedule } from '../context/ScheduleProvider'

const Tab = createBottomTabNavigator()

export default function MainLayout() {
  const {
    schedule,
    setScheduleDraft, // –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
    saveNow,          // –∑–±–µ—Ä–µ–≥—Ç–∏ —É Firebase
    isDirty,
    isLoading,
    error,
    user,
  } = useSchedule()

  const [lessonTimes, setLessonTimes] = useState([])
  const [startingWeek, setStartingWeek] = useState(1)
  const [theme, setTheme] = useState(['light', 'blue'])

  const [currentTheme, accentColor] = theme
  const themeColors = themes[currentTheme] || themes.light
  const accent = themes.accentColors[accentColor] || themes.accentColors.blue

  // –∫–æ–ª–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  useEffect(() => {
    if (schedule) {
      setStartingWeek(schedule.starting_week)
      if (schedule.theme) setTheme(schedule.theme)
    }
  }, [schedule])

  // –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –ø–∞—Ä
  useEffect(() => {
    if (schedule?.start_time && schedule?.duration && schedule?.breaks) {
      calculateLessonTimes(
        schedule.start_time,
        schedule.duration,
        schedule.breaks
      )
    }
  }, [schedule?.start_time, schedule?.duration, schedule?.breaks])

  const calculateLessonTimes = (startTime, duration, breaks) => {
    try {
      const [hours, minutes] = startTime.split(':').map(Number)
      if (isNaN(hours) || isNaN(minutes)) {
        throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç start_time: ${startTime}`)
      }
      const start = new Date()
      start.setHours(hours, minutes, 0)
      const times = []
      let currentTime = new Date(start)

      breaks.forEach((breakDuration) => {
        const endOfLesson = new Date(
          currentTime.getTime() + duration * 60 * 1000
        )
        times.push({
          start: currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          end: endOfLesson.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        })
        currentTime = new Date(endOfLesson.getTime() + breakDuration * 60 * 1000)
      })

      setLessonTimes(times)
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É –ø–∞—Ä:', error.message)
    }
  }

  // –∑–º—ñ–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å (–ª–æ–∫–∞–ª—å–Ω–æ) ‚Äî –±–µ–∑ —Å–µ–π–≤—É
  const updateStartingWeek = (week) => {
    const formattedDate = new Date(
      week.getFullYear(),
      week.getMonth(),
      week.getDate()
    ).toISOString().split('T')[0]

    setScheduleDraft(prev => ({ ...prev, starting_week: formattedDate }))
    setStartingWeek(formattedDate)
  }

  const handleAutoSaveIntervalChange = (interval) => {
    setScheduleDraft(prev => ({ ...prev, auto_save: interval }))
    // —Ç–∞–π–º–µ—Ä –ø—ñ–¥—Ö–æ–ø–∏—Ç—å –∑–º—ñ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–ø –Ω–∏–∂—á–µ
  }

  const handleDataChange = (updatedSchedule) => {
    setScheduleDraft(updatedSchedule)
  }

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme)
    setScheduleDraft(prev => ({ ...prev, theme: newTheme }))
  }

  const autoSaveInterval = schedule?.auto_save ?? 30

  const commonProps = {
    schedule,
    authUser: user,
    autoSaveInterval,
    isUnsavedChanges: isDirty,
    setSchedule: setScheduleDraft,  // üîÅ —â–æ–± —ñ—Å–Ω—É—é—á—ñ –µ–∫—Ä–∞–Ω–∏ –Ω–µ –ª–∞–º–∞—Ç–∏
    onDataChange: handleDataChange,
    lessonTimes,
    updateStartingWeek,
    startingWeek,
    handleAutoSaveIntervalChange,
    onThemeChange: handleThemeChange,
    theme,
    themeColors,
    accent,
  }

  if (isLoading) return <Text>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Text>
  if (error) return <Text>–ü–æ–º–∏–ª–∫–∞: {error}</Text>

  return (
    <View style={[{ flex: 1, paddingTop: 40, backgroundColor: themeColors.backgroundColor }]}>
      <StatusBar
        style={currentTheme === 'dark' ? 'light' : 'dark'}
        backgroundColor={themeColors.backgroundColor}
        animated={true}
      />

      <View style={styles.container}>
        {isDirty && (
          <Button title="–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—Ä–∞–∑" onPress={saveNow} />
        )}
        <TabNavigator commonProps={commonProps} />
      </View>

      <AutoSaveManager
        onSave={saveNow}                     // ‚úÖ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—É—Ç (—ñ –∫–Ω–æ–ø–∫–æ—é)
        isUnsavedChanges={isDirty}
        autoSaveInterval={autoSaveInterval}
      />
    </View>
  )
}

const styles = StyleSheet.create({
  container: { flex: 1 },
})
