import {
  doc,
  setDoc,
  getDocs,
  collection,
  getDoc,
  updateDoc,
  onSnapshot,
} from "firebase/firestore";
import { db, auth } from "../../firebase";
import * as Device from "expo-device";
import { Platform } from "react-native";
import * as Crypto from "expo-crypto";
import { signOut } from "firebase/auth";

// üîë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ deviceId
export async function getDeviceId(userId) {
  let rawDeviceId;

  if (Platform.OS === "web") {
    rawDeviceId = navigator.userAgent || "WebBrowser";
  } else {
    rawDeviceId = `${Device.brand || "Unknown"}-${Device.modelName || "Unknown"}-${Device.deviceName || "Unknown"}`;
  }

  const input = `${userId}-${rawDeviceId}`;

  return await Crypto.digestStringAsync(
    Crypto.CryptoDigestAlgorithm.SHA256,
    input
  );
}

// ‚ÑπÔ∏è –Ü–Ω—Ñ–æ –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π
export function getDeviceInfo() {
  if (Platform.OS === "web") {
    return {
      name: navigator.userAgent || "Web Browser",
      platform: "Web",
      appVersion: navigator.appVersion || "Unknown",
    };
  }
  return {
    name: Device.deviceName ?? "Unknown Device",
    platform: Device.osName ?? "Unknown",
    brand: Device.brand ?? "Unknown",
    model: Device.modelName ?? "Unknown",
    appVersion: "Unknown",
  };
}

// üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é
export async function registerDevice(userId) {
  if (!userId) return;

  const deviceId = await getDeviceId(userId);
  const ref = doc(db, "users", userId, "devices", deviceId);
  const snap = await getDoc(ref);
  const { name, platform, appVersion } = getDeviceInfo();

  if (snap.exists()) {
    const data = snap.data();

    if (data.isActive === false) {
      console.warn("‚õî –¶–µ–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –±—É–≤ –≤—ñ–¥‚Äô—î–¥–Ω–∞–Ω–∏–π ‚Üí –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é");
      await setDoc(ref, {
        name,
        platform,
        lastLogin: new Date().toISOString(),
        isActive: true,
        appVersion,
      });
      console.log(`üîì –ü—Ä–∏—Å—Ç—Ä—ñ–π [${name}] (${platform}) –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
      return;
    }



    await updateDoc(ref, {
      lastLogin: new Date().toISOString(),
      appVersion,
    });
    console.log(`‚úÖ –ü—Ä–∏—Å—Ç—Ä—ñ–π [${name}] (${platform}) –æ–Ω–æ–≤–ª–µ–Ω–∏–π`);
  } else {
    await setDoc(ref, {
      name,
      platform,
      lastLogin: new Date().toISOString(),
      isActive: true,
      appVersion,
    });
    console.log(`üÜï –ü—Ä–∏—Å—Ç—Ä—ñ–π [${name}] (${platform}) –¥–æ–¥–∞–Ω–∏–π`);
  }
}


// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó —é–∑–µ—Ä–∞
export async function getDevices(userId) {
  if (!userId) return [];
  const devicesRef = collection(db, "users", userId, "devices");
  const snap = await getDocs(devicesRef);
  return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
}

// ‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π
export async function deactivateDevice(userId, deviceId) {
  if (!userId || !deviceId) return;
  const ref = doc(db, "users", userId, "devices", deviceId);
  await updateDoc(ref, { isActive: false });

  const currentId = await getDeviceId(userId);
  if (deviceId === currentId) {
    try {
      await signOut(auth);
    } catch (err) {
      console.warn("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:", err);
    }
  }
}

// ‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ, –∫—Ä—ñ–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ
export async function deactivateAllExceptCurrent(userId) {
  if (!userId) return;
  const currentId = await getDeviceId(userId);
  const devices = await getDevices(userId);
  for (const d of devices) {
    if (d.id !== currentId) {
      await deactivateDevice(userId, d.id);
    }
  }
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—Ç—Ä–æ—é
export async function checkDeviceStatus(userId) {
  if (!userId) return false;
  const deviceId = await getDeviceId(userId);
  const ref = doc(db, "users", userId, "devices", deviceId);
  const snap = await getDoc(ref);
  return snap.exists() ? snap.data().isActive !== false : true;
}

// üëÇ Live-—Å–ª—É—Ö–∞—á –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
export async function listenDeviceStatus(userId) {
  if (!userId) return () => {};
  const deviceId = await getDeviceId(userId);
  const ref = doc(db, "users", userId, "devices", deviceId);

  return onSnapshot(ref, async (snap) => {
    if (snap.exists() && snap.data().isActive === false) {
      console.warn("‚õî –¶–µ–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –≤—ñ–¥‚Äô—î–¥–Ω–∞–Ω–æ ‚Üí –≤–∏—Ö—ñ–¥ –∑ –∞–∫–∞—É–Ω—Ç–∞");
      try {
        await signOut(auth);
      } catch (err) {
        console.warn("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:", err);
      }
    }
  });
}
